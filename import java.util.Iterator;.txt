import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class ListExample {

    /* 1. Duplicates are allowed, ordered collection (to access easily),
     * Size is not fixed, it follows indexing, N number of null values are allowed,
     * Two implementation classes we have -- ArrayList & LinkedList
     */

    public static void main(String[] args) {
        // Using a typed LinkedList
        List<Integer> l = new LinkedList<>(); // Using Integer type for safety
        
        // Adding elements to the list
        l.add(10);
        l.add(0, 1);
        // LinkedList has a method addFirst, ArrayList does not.
        // l.addFirst(3);  // Uncommenting this line would cause a compile error with ArrayList
        l.add(3);  // Adding 3 instead for type safety

        System.out.println("List contents: " + l);
        
        // Iterate all the elements using enhanced for loop
        for (Integer l1 : l) {
            System.out.println("The elements in the list are: " + l1);
        }

        // Using Iterator
        Iterator<Integer> itr1 = l.iterator();
        while (itr1.hasNext()) {
            Integer obj = itr1.next();
            System.out.println("The elements using iterator are: " + obj);
        }

        // Remove element at index 0
        l.remove(0);
        System.out.println("After removing from index 0: " + l);

        // Type Safety with GenericClass
        GenericClass<Integer> objj1 = new GenericClass<>(10);
        objj1.setX(10);
        System.out.println("Value in objj1: " + objj1.getX());

        GenericClass<String> objj2 = new GenericClass<>("Java");
        objj2.setX("Java");
        System.out.println("Value in objj2: " + objj2.getX());
    }
}

class GenericClass<T> {
    private T x;

    public GenericClass(T x) {
        this.x = x;
    }

    public T getX() {
        return x;
    }

    public void setX(T x) {
        this.x = x;
    }
}

